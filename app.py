# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GDT7qneOWPOmIC8XHA-t24ZFn8-ABj7i
"""

from flask import Flask, request, jsonify, render_template
import joblib
import pandas as pd
import os
import numpy as np

app = Flask(__name__)

# Load model and scaler
model_data = joblib.load('disaster_model.pkl')
if isinstance(model_data, tuple):
    model, scaler = model_data  # Correctly unpack model and scaler
else:
    model = model_data
    scaler = None

feature_names = ['magnitude', 'depth', 'latitude', 'longitude']

# Routes for rendering frontend pages
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/earthquake')
def earthquake():
    return render_template('earthquake.html')

@app.route('/flood')
def flood():
    return render_template('flood.html')

@app.route('/tsunami')
def tsunami():
    return render_template('tsunami.html')

@app.route('/report_page')
def report_page():
    return render_template('report.html')

@app.route('/emergency_contacts_page')
def emergency_contacts_page():
    return render_template('emergency_contacts.html')

# Prediction API
@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    magnitude = float(data.get('magnitude', 0))
    depth = float(data.get('depth', 0))
    latitude = float(data.get('latitude', 0))
    longitude = float(data.get('longitude', 0))

    # Ensure the feature names match those used during training
    features = np.array([[magnitude, depth, latitude, longitude]])

    # Scale features if scaler is available
    if scaler:
        features = scaler.transform(features)

    prediction = model.predict(features)[0]
    probability = model.predict_proba(features).max() * 100

    return jsonify({
        'disaster_type': prediction,
        'will_occur': 'Yes' if prediction in ['earthquake', 'flood', 'tsunami'] else 'No',
        'probability_score': round(probability, 2),
        'latitude': latitude,
        'longitude': longitude
    })

# Report Issue API
@app.route('/report', methods=['POST'])
def report():
    report_data = request.form
    username = report_data.get('username')
    report_text = report_data.get('report_text')
    image = request.files.get('image')

    if image:
        image_path = os.path.join('uploads', image.filename)
        image.save(image_path)

    return jsonify({'status': 'Report submitted successfully', 'username': username})

# Emergency Contacts API
@app.route('/emergency_contacts', methods=['GET'])
def emergency_contacts():
    contacts = {
        "Fire Department": "911",
        "Police": "911",
        "Ambulance": "911",
        "Disaster Management": "12345"
    }
    return jsonify(contacts)

if __name__ == '__main__':
    app.run(debug=True)
